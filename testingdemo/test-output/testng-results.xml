<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="2" total="10" passed="6" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-08-28T09:58:28Z" name="Suite1" finished-at="2020-08-28T09:58:28Z" duration-ms="630">
    <groups>
    </groups>
    <test started-at="2020-08-28T09:58:28Z" name="stock" finished-at="2020-08-28T09:58:28Z" duration-ms="240">
      <class name="testngdemos.TestDemo2">
        <test-method signature="testA1()[pri:0, instance:testngdemos.TestDemo2@7d8704ef]" started-at="2020-08-28T09:58:28Z" name="testA1" finished-at="2020-08-28T09:58:28Z" duration-ms="16" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testngdemos.TestDemo2.testA1(TestDemo2.java:17)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA1 -->
        <test-method signature="testB()[pri:0, instance:testngdemos.TestDemo2@7d8704ef]" started-at="2020-08-28T09:58:28Z" name="testB" finished-at="2020-08-28T09:58:28Z" depends-on-methods="testngdemos.TestDemo2.testA1" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
      </class> <!-- testngdemos.TestDemo2 -->
      <class name="testngdemos.TestDemo">
        <test-method is-config="true" signature="start()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="start" finished-at="2020-08-28T09:58:28Z" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- start -->
        <test-method is-config="true" signature="load()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="load" finished-at="2020-08-28T09:58:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- load -->
        <test-method is-config="true" signature="methodA()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="methodA" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- methodA -->
        <test-method signature="test1()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="test1" finished-at="2020-08-28T09:58:28Z" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method signature="test2()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="test2" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method is-config="true" signature="methodA()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="methodA" finished-at="2020-08-28T09:58:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- methodA -->
        <test-method is-config="true" signature="after()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="after" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method is-config="true" signature="end()[pri:0, instance:testngdemos.TestDemo@17f7cd29]" started-at="2020-08-28T09:58:28Z" name="end" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- end -->
      </class> <!-- testngdemos.TestDemo -->
    </test> <!-- stock -->
    <test started-at="2020-08-28T09:58:28Z" name="orders" finished-at="2020-08-28T09:58:28Z" duration-ms="110">
      <class name="testngdemos.TestDemo2">
        <test-method signature="testA1()[pri:0, instance:testngdemos.TestDemo2@6f45df59]" started-at="2020-08-28T09:58:28Z" name="testA1" finished-at="2020-08-28T09:58:28Z" duration-ms="8" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testngdemos.TestDemo2.testA1(TestDemo2.java:17)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA1 -->
        <test-method signature="testB()[pri:0, instance:testngdemos.TestDemo2@6f45df59]" started-at="2020-08-28T09:58:28Z" name="testB" finished-at="2020-08-28T09:58:28Z" depends-on-methods="testngdemos.TestDemo2.testA1" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
      </class> <!-- testngdemos.TestDemo2 -->
      <class name="testngdemos.TestDemo">
        <test-method is-config="true" signature="start()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="start" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- start -->
        <test-method is-config="true" signature="load()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="load" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- load -->
        <test-method is-config="true" signature="methodA()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="methodA" finished-at="2020-08-28T09:58:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- methodA -->
        <test-method signature="test1()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="test1" finished-at="2020-08-28T09:58:28Z" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method signature="test2()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="test2" finished-at="2020-08-28T09:58:28Z" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method is-config="true" signature="methodA()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="methodA" finished-at="2020-08-28T09:58:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- methodA -->
        <test-method is-config="true" signature="after()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="after" finished-at="2020-08-28T09:58:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- after -->
        <test-method is-config="true" signature="end()[pri:0, instance:testngdemos.TestDemo@58ea606c]" started-at="2020-08-28T09:58:28Z" name="end" finished-at="2020-08-28T09:58:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- end -->
      </class> <!-- testngdemos.TestDemo -->
    </test> <!-- orders -->
  </suite> <!-- Suite1 -->
</testng-results>
